import { DropzoneDialog } from 'material-ui-dropzone';
import { useEffect, useState } from "react";
import Head from "next/head";
import { Row, Button } from "reactstrap";
import ProjectTables from "../../src/components/dashboard/ProjectTable";
import { firestore } from "../../src/config/firebaseConfig";
import getQrCodes from "../../src/functions/getQrCodes";
import { ref, uploadBytesResumable, getDownloadURL } from 'firebase/storage';
import { storage } from "../../src/config/firebaseConfig";

const qrCodes = () => {

  const [qrCodesList, setQrCodesList] = useState([]);
  const [open, setOpen] = useState(false);
  const [file, setFile] = useState(null);
  const [fileObjects, setFileObjects] = useState([]);

  useEffect(async () => { 
    const db = firestore;
    await getQrCodes(db).then((data) => {  
      setQrCodesList(data);
    });
  }, []);

  const handleOpen = () => {
    setOpen(true);
  }

  const handleClose = () => {
    setOpen(false);
  }

  const handleSave = (files) => {
    setFile(URL.createObjectURL(files[0]));
    setFileObjects(files);
    uploadFileToFirebase(files);
    setOpen(false);
  }

  const uploadFileToFirebase = (files) => {
    files.forEach((file) => {
      const storageRef = ref(storage, `glbFiles/general/${file.name}`);
      const uploadTask = uploadBytesResumable(storageRef, file);
  
      uploadTask.on('state_changed', 
        (snapshot) => {
          const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
          console.log('Upload is ' + progress + '% done');
        }, 
        (error) => {
          console.log(error);
        }, 
        async () => {
          const downloadURL = await getDownloadURL(uploadTask.snapshot.ref);
          console.log('File available at', downloadURL);
        }
      );
    });
  }
  
  return (
    <div>
      <Head>
        <title>Alert Page - Xtreme Starter Next Js App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="d-flex justify-content-end p-3">
        <Button  
          style={{
            backgroundColor: 'white !important',
            opacity: '0.8',
            color: 'black',
            borderColor: 'transparent',
            borderRadius: '50% !important',
            height: '3rem !important',
            minWidth: '3rem !important',
            boxShadow: '0 0.5rem 1rem rgba(0, 0, 0, 0.05)'
          }}
          
          onClick={() => handleOpen()}
        >
          <i
            className="bi bi-plus"
            style={{
              fontSize: '1.5rem',
              position: 'relative',
              top: '0.3px',
              left: '0.5px',
              opacity: '0.9'
            }}  
          ></i>
        </Button>
      </div>
    
      <Row>
        <ProjectTables qrCodesList={qrCodesList} />
      </Row>

      <div>
      {file ? (
        <div 
          dangerouslySetInnerHTML={{
            __html: `<model-viewer style="width: 100%; height: 400px;" src="${file}" auto-rotate camera-controls></model-viewer>`,
          }}
        />
      ) : (
        <DropzoneDialog
          open={open}
          onSave={handleSave}
          acceptedFiles={['.glb']}
          filesLimit={1}
          maxFileSize={50000000}
          onClose={handleClose}
        />
      )}
    </div>
    
    </div>
  );
};

export default qrCodes;
